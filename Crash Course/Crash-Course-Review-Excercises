{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Crash Course Review Exercises "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Import numpy,pandas,matplotlib,and sklearn. Also set visualizations to be shown inline in the notebook.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-51-ed681f1ff57b>, line 7)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-51-ed681f1ff57b>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    [StackOverflow Question on why we use it]\u001b[0m\n\u001b[0m                          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import sklearn as sk\n",
    "import matplotlib as pb\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "[StackOverflow Question on why we use it]\n",
    "(https://stackoverflow.com/questions/43027980/purpose-of-matplotlib-inline/43028034\n",
    ")\n",
    "\n",
    "https://stackoverflow.com/questions/43027980/purpose-of-matplotlib-inline/43028034\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Set Numpy's Random Seed to 101 **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.seed(101)\n",
    "my_random = np.random.randint(0,101)\n",
    "my_random"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Create a NumPy Matrix of 100 rows by 5 columns consisting of random integers from 1-100. (Keep in mind that the upper limit may be exclusive.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "another_random = np.random.randint(1,101, (100,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 96,  12,  82,  71,  64],\n",
       "       [ 88,  76,  10,  78,  41],\n",
       "       [  5,  64,  41,  61,  93],\n",
       "       [ 65,   6,  13,  94,  41],\n",
       "       [ 50,  84,   9,  30,  60],\n",
       "       [ 35,  45,  73,  20,  11],\n",
       "       [ 77,  96,  88,   1,  74],\n",
       "       [  9,  63,  37,  84, 100],\n",
       "       [ 29,  64,   8,  11,  53],\n",
       "       [ 57,  39,  74,  53,  19],\n",
       "       [ 72,  16,  45,   1,  13],\n",
       "       [ 18,  76,  80,  98,  94],\n",
       "       [ 25,  37,  64,  20,  36],\n",
       "       [ 31,  11,  61,  21,  28],\n",
       "       [  9,  87,  27,  88,  47],\n",
       "       [ 48,  55,  87,  10,  46],\n",
       "       [  3,  19,  59,  93,  12],\n",
       "       [ 11,  95,  36,  29,   4],\n",
       "       [ 84,  85,  48,  15,  70],\n",
       "       [ 61,  70,  52,   7,  89],\n",
       "       [ 72,  69,  24,  36,  80],\n",
       "       [ 99,  68,  83,  58,  78],\n",
       "       [ 47,   4,  47,  30,  87],\n",
       "       [ 22,  22,  82,  24,  95],\n",
       "       [ 72,  21,  28,  76,   6],\n",
       "       [ 50,  87,  90,  64,  83],\n",
       "       [ 78,   4,  57,  15,  50],\n",
       "       [ 88,  53,  14,  48,  50],\n",
       "       [ 25,  21,  65,  53,  61],\n",
       "       [ 48,  30,  61,  54,  12],\n",
       "       [ 41,  92,  46,  98,  25],\n",
       "       [ 37,  39,  10,  53,  68],\n",
       "       [ 44,   2,  80,  69,  69],\n",
       "       [ 62,  19,  52,  15,  29],\n",
       "       [ 18,  88,  47,  53,  17],\n",
       "       [ 71,  72,  85,  11,  63],\n",
       "       [ 97,  58,  24,  87,  86],\n",
       "       [ 27,  77,  67,  55,  18],\n",
       "       [ 66,  58,  90,   3,  81],\n",
       "       [ 51,  67,  89,  80,  94],\n",
       "       [  7,  93,  43,  23,  21],\n",
       "       [ 26,  98,  55,  72,  73],\n",
       "       [ 81,  94,  65,  64,  81],\n",
       "       [ 39,  46,  36,  26,  96],\n",
       "       [ 76,  73,  12,  77,  80],\n",
       "       [ 51,  23,  60,  67,   2],\n",
       "       [ 35,  38,  58,  36,  43],\n",
       "       [ 45,  50,  32,  80,  86],\n",
       "       [  4,  56,  74,  94,  95],\n",
       "       [100,  41,  55,  89,  95],\n",
       "       [ 87,  18,  69,  18,  19],\n",
       "       [ 61,  84,  83,   8,  68],\n",
       "       [ 35,  77,  95,  21,  70],\n",
       "       [ 74,  60,  35,  70,  26],\n",
       "       [ 79,  93,  75,  76,  34],\n",
       "       [ 10,  44,  21,  83,  31],\n",
       "       [  4,  47,  30,  48,  28],\n",
       "       [ 82,  72,  26,  95,  58],\n",
       "       [ 22,  30,   7,  55,  48],\n",
       "       [ 48,  61,   7,  76,  98],\n",
       "       [ 54,  45,  99,  40,  33],\n",
       "       [ 88,  79,  22,  91,  15],\n",
       "       [ 21,   2,  71,  26,  46],\n",
       "       [ 97,  33,  32,  42,  80],\n",
       "       [ 88,  23,  95,  47,  72],\n",
       "       [ 25,  42,  37,  32,  17],\n",
       "       [ 88,  23,  97,   4,  13],\n",
       "       [ 72,  10,  88,  96,  40],\n",
       "       [ 65,  63,  89,  77,  94],\n",
       "       [ 84,  96,  69,  70,  60],\n",
       "       [ 53,   8,  41,  74,  87],\n",
       "       [ 15,  50,  98,  26,  58],\n",
       "       [ 41,  18,  33,  84,  98],\n",
       "       [ 28,  48,  14,  71,  16],\n",
       "       [ 93,  19,  95,  49,  66],\n",
       "       [ 83,  35,   6,  47,  84],\n",
       "       [ 28,  27,  21,  88,  85],\n",
       "       [ 18,  60,  65,  45,   5],\n",
       "       [ 52,  50,  75,  83,  38],\n",
       "       [ 54,  94,  74,   6,  38],\n",
       "       [ 57,  36,  16,  41,  43],\n",
       "       [ 72,  38,  47,  72,  92],\n",
       "       [ 98,  37,  44,  28,  67],\n",
       "       [ 58,   4,  56,  71,  42],\n",
       "       [ 68,  73,  89,  68,  76],\n",
       "       [ 70,  93,  21,  16,  58],\n",
       "       [ 10,  70,  98,  92,  52],\n",
       "       [ 55,  46,  39,  16,  43],\n",
       "       [ 62,   9,   4,  89,  73],\n",
       "       [ 42,  25,  94,  29,  96],\n",
       "       [ 44,  49,  70,  43,  67],\n",
       "       [ 83,  67,  89,  79,  15],\n",
       "       [ 54,  47,  15,  28,  69],\n",
       "       [ 22,  39,  43,  31,  89],\n",
       "       [ 80,  57,  66,  94,  38],\n",
       "       [ 88,  67,  17,  61,  26],\n",
       "       [100,  31,  42,  73,  46],\n",
       "       [ 27,  88,  66,  61,  90],\n",
       "       [ 71,  34,  60,  29,  17],\n",
       "       [ 50,  96,  42,  12,  87]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Create a 2-D visualization using plt.imshow of the numpy matrix with a colorbar. Add a title to your plot. Bonus: Figure out how to change the [*aspect*](https://stackoverflow.com/questions/10540929/figure-of-imshow-is-too-small) of the imshow() plot. **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Graph')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.imshow(another_random , aspect='auto')\n",
    "plt.xlabel('Mohamed')\n",
    "plt.ylabel('Graph')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Now use pd.DataFrame() to read in this numpy array as a dataframe. Simple pass in the numpy array into that function to get back a dataframe. Pandas will auto label the columns to 0-4**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_frame = pd.DataFrame(another_random)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Now create a scatter plot using pandas of the 0 column vs the 1 column. **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Now scale the data to have a minimum of 0 and a maximum value of 1 using scikit-learn. **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "scalerModel = MinMaxScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by MinMaxScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.09375   , 0.13131313, 0.26530612, 0.91919192, 0.35051546],\n",
       "       [0.40625   , 0.51515152, 0.92857143, 0.87878788, 0.57731959],\n",
       "       [0.4375    , 0.87878788, 0.83673469, 0.82828283, 0.50515464],\n",
       "       [0.5625    , 0.16161616, 0.45918367, 0.55555556, 0.88659794],\n",
       "       [0.90625   , 0.60606061, 0.59183673, 0.54545455, 0.53608247],\n",
       "       [0.5625    , 0.45454545, 0.54081633, 0.67676768, 0.1443299 ],\n",
       "       [0.77083333, 0.03030303, 0.5       , 0.98989899, 0.94845361],\n",
       "       [0.04166667, 0.90909091, 0.95918367, 0.48484848, 0.70103093],\n",
       "       [0.13541667, 0.64646465, 0.20408163, 0.32323232, 0.7628866 ],\n",
       "       [0.61458333, 0.88888889, 1.        , 0.32323232, 0.80412371],\n",
       "       [0.125     , 0.41414141, 0.51020408, 0.56565657, 0.55670103],\n",
       "       [0.48958333, 0.63636364, 0.10204082, 0.50505051, 0.22680412],\n",
       "       [0.32291667, 0.72727273, 0.91836735, 0.3030303 , 0.60824742],\n",
       "       [0.1875    , 0.76767677, 0.48979592, 0.16161616, 0.27835052],\n",
       "       [0.04166667, 0.42424242, 0.84693878, 0.37373737, 0.34020619],\n",
       "       [0.72916667, 0.67676768, 0.03061224, 0.73737374, 0.84536082],\n",
       "       [0.0625    , 0.03030303, 0.2755102 , 0.95959596, 0.80412371],\n",
       "       [1.        , 0.2020202 , 0.66326531, 0.7979798 , 0.88659794],\n",
       "       [0.73958333, 0.12121212, 0.57142857, 0.36363636, 0.        ],\n",
       "       [0.02083333, 0.77777778, 0.84693878, 0.70707071, 0.98969072],\n",
       "       [0.91666667, 0.64646465, 0.47959184, 0.22222222, 0.51546392],\n",
       "       [0.96875   , 0.68686869, 0.62244898, 0.43434343, 0.48453608],\n",
       "       [0.39583333, 0.15151515, 0.97959184, 0.26262626, 0.80412371],\n",
       "       [0.69791667, 0.35353535, 0.45918367, 0.26262626, 0.20618557],\n",
       "       [0.17708333, 0.04040404, 0.63265306, 0.72727273, 0.75257732],\n",
       "       [0.05208333, 0.33333333, 0.03061224, 0.60606061, 0.3814433 ],\n",
       "       [0.79166667, 0.65656566, 0.84693878, 0.7979798 , 0.16494845],\n",
       "       [0.4375    , 0.74747475, 0.82653061, 0.03030303, 0.01030928],\n",
       "       [0.94791667, 0.86868687, 0.23469388, 0.27272727, 0.37113402],\n",
       "       [0.20833333, 0.16161616, 0.60204082, 0.11111111, 0.15463918],\n",
       "       [0.61458333, 0.37373737, 0.19387755, 0.81818182, 0.69072165],\n",
       "       [0.3125    , 0.74747475, 0.3877551 , 0.15151515, 0.24742268],\n",
       "       [0.09375   , 1.        , 0.51020408, 0.26262626, 0.81443299],\n",
       "       [0.38541667, 0.82828283, 0.2244898 , 0.7979798 , 0.70103093],\n",
       "       [0.72916667, 0.1010101 , 0.93877551, 0.86868687, 0.81443299],\n",
       "       [0.11458333, 0.43434343, 0.02040816, 0.4040404 , 0.26804124],\n",
       "       [0.36458333, 1.        , 0.08163265, 0.1010101 , 0.98969072],\n",
       "       [0.61458333, 0.71717172, 0.17346939, 0.17171717, 0.5257732 ],\n",
       "       [0.51041667, 0.33333333, 0.3877551 , 0.41414141, 0.91752577],\n",
       "       [0.40625   , 0.75757576, 0.14285714, 0.14141414, 0.63917526],\n",
       "       [0.        , 0.17171717, 0.42857143, 0.09090909, 0.58762887],\n",
       "       [0.08333333, 0.60606061, 0.89795918, 0.55555556, 0.5257732 ],\n",
       "       [0.82291667, 0.68686869, 0.56122449, 0.47474747, 0.39175258],\n",
       "       [0.97916667, 0.07070707, 0.87755102, 0.        , 0.83505155],\n",
       "       [0.57291667, 0.60606061, 0.21428571, 0.96969697, 0.96907216],\n",
       "       [0.57291667, 0.44444444, 0.7244898 , 0.82828283, 0.57731959],\n",
       "       [0.78125   , 0.98989899, 0.14285714, 0.82828283, 0.80412371],\n",
       "       [0.75      , 0.54545455, 0.74489796, 0.3030303 , 0.06185567],\n",
       "       [0.83333333, 0.47474747, 0.44897959, 0.32323232, 0.46391753],\n",
       "       [0.625     , 0.49494949, 0.05102041, 0.52525253, 0.79381443],\n",
       "       [0.91666667, 0.77777778, 0.31632653, 0.47474747, 0.4742268 ],\n",
       "       [0.8125    , 0.21212121, 0.        , 0.04040404, 0.86597938],\n",
       "       [0.21875   , 0.66666667, 0.52040816, 0.48484848, 0.60824742],\n",
       "       [0.04166667, 0.65656566, 0.78571429, 0.13131313, 0.70103093],\n",
       "       [0.19791667, 0.80808081, 0.84693878, 0.45454545, 0.59793814],\n",
       "       [0.8125    , 0.80808081, 0.13265306, 0.82828283, 0.49484536],\n",
       "       [0.20833333, 0.05050505, 0.55102041, 0.93939394, 0.94845361],\n",
       "       [0.        , 0.85858586, 0.01020408, 0.23232323, 0.32989691],\n",
       "       [0.16666667, 0.28282828, 0.44897959, 0.44444444, 0.36082474],\n",
       "       [0.10416667, 0.54545455, 0.2755102 , 0.60606061, 0.27835052],\n",
       "       [0.04166667, 0.56565657, 0.92857143, 0.13131313, 0.45360825],\n",
       "       [0.1875    , 0.49494949, 0.62244898, 0.19191919, 0.21649485],\n",
       "       [0.85416667, 0.91919192, 0.31632653, 0.93939394, 0.11340206],\n",
       "       [0.27083333, 0.3030303 , 0.82653061, 0.72727273, 0.46391753],\n",
       "       [0.65625   , 0.57575758, 0.90816327, 0.73737374, 0.3814433 ],\n",
       "       [0.25      , 0.07070707, 0.01020408, 0.53535354, 0.69072165],\n",
       "       [0.84375   , 0.66666667, 0.10204082, 0.43434343, 0.2371134 ],\n",
       "       [0.0625    , 0.83838384, 0.95918367, 0.76767677, 0.94845361],\n",
       "       [0.20833333, 0.12121212, 0.        , 0.47474747, 0.55670103],\n",
       "       [0.45833333, 0.74747475, 0.03061224, 0.93939394, 0.84536082],\n",
       "       [0.30208333, 0.63636364, 0.65306122, 0.41414141, 0.56701031],\n",
       "       [0.40625   , 0.27272727, 0.90816327, 0.6969697 , 0.98969072],\n",
       "       [0.13541667, 0.91919192, 0.75510204, 0.98989899, 0.55670103],\n",
       "       [0.78125   , 0.74747475, 0.2755102 , 0.76767677, 0.70103093],\n",
       "       [0.64583333, 0.61616162, 0.86734694, 0.21212121, 0.50515464],\n",
       "       [0.71875   , 0.93939394, 0.6122449 , 0.18181818, 0.72164948],\n",
       "       [0.83333333, 0.74747475, 0.57142857, 0.85858586, 0.92783505],\n",
       "       [0.52083333, 0.25252525, 0.04081633, 0.02020202, 0.45360825],\n",
       "       [0.21875   , 0.95959596, 0.        , 0.8989899 , 0.72164948],\n",
       "       [0.52083333, 0.1010101 , 0.40816327, 0.51515152, 0.01030928],\n",
       "       [0.22916667, 0.39393939, 0.7244898 , 0.21212121, 0.        ],\n",
       "       [0.04166667, 0.07070707, 0.8877551 , 0.5959596 , 1.        ],\n",
       "       [0.86458333, 0.29292929, 0.47959184, 0.84848485, 0.37113402],\n",
       "       [0.86458333, 0.75757576, 0.65306122, 0.58585859, 0.19587629],\n",
       "       [0.13541667, 0.74747475, 0.91836735, 0.90909091, 0.57731959],\n",
       "       [0.66666667, 0.75757576, 0.3877551 , 0.92929293, 0.72164948],\n",
       "       [0.51041667, 0.52525253, 0.82653061, 0.34343434, 0.35051546],\n",
       "       [0.51041667, 0.41414141, 0.62244898, 0.65656566, 0.89690722],\n",
       "       [0.625     , 0.23232323, 0.46938776, 0.73737374, 0.71134021],\n",
       "       [0.89583333, 0.13131313, 0.94897959, 1.        , 0.49484536],\n",
       "       [0.41666667, 0.31313131, 0.40816327, 0.48484848, 0.        ],\n",
       "       [0.51041667, 0.53535354, 0.76530612, 0.25252525, 0.20618557],\n",
       "       [0.8125    , 0.08080808, 0.52040816, 0.63636364, 0.08247423],\n",
       "       [0.375     , 0.        , 0.17346939, 0.24242424, 0.90721649],\n",
       "       [0.27083333, 0.34343434, 0.90816327, 0.42424242, 0.15463918],\n",
       "       [0.38541667, 0.54545455, 0.25510204, 0.04040404, 0.49484536],\n",
       "       [0.21875   , 0.1010101 , 0.8877551 , 0.57575758, 0.49484536],\n",
       "       [0.0625    , 0.87878788, 0.89795918, 0.49494949, 0.72164948],\n",
       "       [0.44791667, 0.50505051, 0.23469388, 0.70707071, 0.04123711],\n",
       "       [0.92708333, 0.75757576, 0.03061224, 0.        , 0.54639175]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scalerModel.fit(another_random)\n",
    "scalerModel.transform(another_random)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Using your previously created DataFrame, use [df.columns = [...]](https://stackoverflow.com/questions/11346283/renaming-columns-in-pandas) to rename the pandas columns to be ['f1','f2','f3','f4','label']. Then perform a train/test split with scikitlearn.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_frame.columns = ['f1','f2','f3','f4','lables']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>f1</th>\n",
       "      <th>f2</th>\n",
       "      <th>f3</th>\n",
       "      <th>f4</th>\n",
       "      <th>lables</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>27</td>\n",
       "      <td>92</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>43</td>\n",
       "      <td>52</td>\n",
       "      <td>92</td>\n",
       "      <td>88</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>46</td>\n",
       "      <td>88</td>\n",
       "      <td>83</td>\n",
       "      <td>83</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>58</td>\n",
       "      <td>17</td>\n",
       "      <td>46</td>\n",
       "      <td>56</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>91</td>\n",
       "      <td>61</td>\n",
       "      <td>59</td>\n",
       "      <td>55</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>58</td>\n",
       "      <td>46</td>\n",
       "      <td>54</td>\n",
       "      <td>68</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>78</td>\n",
       "      <td>4</td>\n",
       "      <td>50</td>\n",
       "      <td>99</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>91</td>\n",
       "      <td>95</td>\n",
       "      <td>49</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17</td>\n",
       "      <td>65</td>\n",
       "      <td>21</td>\n",
       "      <td>33</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>63</td>\n",
       "      <td>89</td>\n",
       "      <td>99</td>\n",
       "      <td>33</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>16</td>\n",
       "      <td>42</td>\n",
       "      <td>51</td>\n",
       "      <td>57</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>51</td>\n",
       "      <td>64</td>\n",
       "      <td>11</td>\n",
       "      <td>51</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>35</td>\n",
       "      <td>73</td>\n",
       "      <td>91</td>\n",
       "      <td>31</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>22</td>\n",
       "      <td>77</td>\n",
       "      <td>49</td>\n",
       "      <td>17</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>8</td>\n",
       "      <td>43</td>\n",
       "      <td>84</td>\n",
       "      <td>38</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>74</td>\n",
       "      <td>68</td>\n",
       "      <td>4</td>\n",
       "      <td>74</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>28</td>\n",
       "      <td>96</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>100</td>\n",
       "      <td>21</td>\n",
       "      <td>66</td>\n",
       "      <td>80</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>75</td>\n",
       "      <td>13</td>\n",
       "      <td>57</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>6</td>\n",
       "      <td>78</td>\n",
       "      <td>84</td>\n",
       "      <td>71</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>92</td>\n",
       "      <td>65</td>\n",
       "      <td>48</td>\n",
       "      <td>23</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>97</td>\n",
       "      <td>69</td>\n",
       "      <td>62</td>\n",
       "      <td>44</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>42</td>\n",
       "      <td>16</td>\n",
       "      <td>97</td>\n",
       "      <td>27</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>71</td>\n",
       "      <td>36</td>\n",
       "      <td>46</td>\n",
       "      <td>27</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>21</td>\n",
       "      <td>5</td>\n",
       "      <td>63</td>\n",
       "      <td>73</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>9</td>\n",
       "      <td>34</td>\n",
       "      <td>4</td>\n",
       "      <td>61</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>80</td>\n",
       "      <td>66</td>\n",
       "      <td>84</td>\n",
       "      <td>80</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>46</td>\n",
       "      <td>75</td>\n",
       "      <td>82</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>95</td>\n",
       "      <td>87</td>\n",
       "      <td>24</td>\n",
       "      <td>28</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>24</td>\n",
       "      <td>17</td>\n",
       "      <td>60</td>\n",
       "      <td>12</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>33</td>\n",
       "      <td>64</td>\n",
       "      <td>65</td>\n",
       "      <td>42</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>43</td>\n",
       "      <td>28</td>\n",
       "      <td>90</td>\n",
       "      <td>70</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>17</td>\n",
       "      <td>92</td>\n",
       "      <td>75</td>\n",
       "      <td>99</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>79</td>\n",
       "      <td>75</td>\n",
       "      <td>28</td>\n",
       "      <td>77</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>66</td>\n",
       "      <td>62</td>\n",
       "      <td>86</td>\n",
       "      <td>22</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>73</td>\n",
       "      <td>94</td>\n",
       "      <td>61</td>\n",
       "      <td>19</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>84</td>\n",
       "      <td>75</td>\n",
       "      <td>57</td>\n",
       "      <td>86</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>54</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>25</td>\n",
       "      <td>96</td>\n",
       "      <td>1</td>\n",
       "      <td>90</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>54</td>\n",
       "      <td>11</td>\n",
       "      <td>41</td>\n",
       "      <td>52</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>26</td>\n",
       "      <td>40</td>\n",
       "      <td>72</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>88</td>\n",
       "      <td>60</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>87</td>\n",
       "      <td>30</td>\n",
       "      <td>48</td>\n",
       "      <td>85</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>87</td>\n",
       "      <td>76</td>\n",
       "      <td>65</td>\n",
       "      <td>59</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>17</td>\n",
       "      <td>75</td>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>68</td>\n",
       "      <td>76</td>\n",
       "      <td>39</td>\n",
       "      <td>93</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>53</td>\n",
       "      <td>53</td>\n",
       "      <td>82</td>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>53</td>\n",
       "      <td>42</td>\n",
       "      <td>62</td>\n",
       "      <td>66</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>64</td>\n",
       "      <td>24</td>\n",
       "      <td>47</td>\n",
       "      <td>74</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>90</td>\n",
       "      <td>14</td>\n",
       "      <td>94</td>\n",
       "      <td>100</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>44</td>\n",
       "      <td>32</td>\n",
       "      <td>41</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>53</td>\n",
       "      <td>54</td>\n",
       "      <td>76</td>\n",
       "      <td>26</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>82</td>\n",
       "      <td>9</td>\n",
       "      <td>52</td>\n",
       "      <td>64</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>25</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>90</td>\n",
       "      <td>43</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>41</td>\n",
       "      <td>55</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>25</td>\n",
       "      <td>11</td>\n",
       "      <td>88</td>\n",
       "      <td>58</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>10</td>\n",
       "      <td>88</td>\n",
       "      <td>89</td>\n",
       "      <td>50</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>47</td>\n",
       "      <td>51</td>\n",
       "      <td>24</td>\n",
       "      <td>71</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>93</td>\n",
       "      <td>76</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     f1  f2  f3   f4  lables\n",
       "0    13  14  27   92      35\n",
       "1    43  52  92   88      57\n",
       "2    46  88  83   83      50\n",
       "3    58  17  46   56      87\n",
       "4    91  61  59   55      53\n",
       "5    58  46  54   68      15\n",
       "6    78   4  50   99      93\n",
       "7     8  91  95   49      69\n",
       "8    17  65  21   33      75\n",
       "9    63  89  99   33      79\n",
       "10   16  42  51   57      55\n",
       "11   51  64  11   51      23\n",
       "12   35  73  91   31      60\n",
       "13   22  77  49   17      28\n",
       "14    8  43  84   38      34\n",
       "15   74  68   4   74      83\n",
       "16   10   4  28   96      79\n",
       "17  100  21  66   80      87\n",
       "18   75  13  57   37       1\n",
       "19    6  78  84   71      97\n",
       "20   92  65  48   23      51\n",
       "21   97  69  62   44      48\n",
       "22   42  16  97   27      79\n",
       "23   71  36  46   27      21\n",
       "24   21   5  63   73      74\n",
       "25    9  34   4   61      38\n",
       "26   80  66  84   80      17\n",
       "27   46  75  82    4       2\n",
       "28   95  87  24   28      37\n",
       "29   24  17  60   12      16\n",
       "..  ...  ..  ..  ...     ...\n",
       "70   33  64  65   42      56\n",
       "71   43  28  90   70      97\n",
       "72   17  92  75   99      55\n",
       "73   79  75  28   77      69\n",
       "74   66  62  86   22      50\n",
       "75   73  94  61   19      71\n",
       "76   84  75  57   86      91\n",
       "77   54  26   5    3      45\n",
       "78   25  96   1   90      71\n",
       "79   54  11  41   52       2\n",
       "80   26  40  72   22       1\n",
       "81    8   8  88   60      98\n",
       "82   87  30  48   85      37\n",
       "83   87  76  65   59      20\n",
       "84   17  75  91   91      57\n",
       "85   68  76  39   93      71\n",
       "86   53  53  82   35      35\n",
       "87   53  42  62   66      88\n",
       "88   64  24  47   74      70\n",
       "89   90  14  94  100      49\n",
       "90   44  32  41   49       1\n",
       "91   53  54  76   26      21\n",
       "92   82   9  52   64       9\n",
       "93   40   1  18   25      89\n",
       "94   30  35  90   43      16\n",
       "95   41  55  26    5      49\n",
       "96   25  11  88   58      49\n",
       "97   10  88  89   50      71\n",
       "98   47  51  24   71       5\n",
       "99   93  76   4    1      54\n",
       "\n",
       "[100 rows x 5 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = my_frame[['f1','f2','f3','f4']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = my_frame['lables']\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Great Job!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
